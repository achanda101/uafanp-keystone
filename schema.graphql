# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type HomePage {
  id: ID!
  title: String
  heroHeading: String
  heroSubheading: String
  ctaButtonText: String
  ctaButtonUrl: String
  grantCardsQuickView: String
  toPublish: String
  createdAt: DateTime
  updatedAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input HomePageWhereUniqueInput {
  id: ID
}

input HomePageWhereInput {
  AND: [HomePageWhereInput!]
  OR: [HomePageWhereInput!]
  NOT: [HomePageWhereInput!]
  id: IDFilter
  title: StringFilter
  heroHeading: StringFilter
  heroSubheading: StringFilter
  ctaButtonText: StringFilter
  ctaButtonUrl: StringFilter
  toPublish: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input HomePageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  heroHeading: OrderDirection
  heroSubheading: OrderDirection
  ctaButtonText: OrderDirection
  ctaButtonUrl: OrderDirection
  toPublish: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input HomePageUpdateInput {
  title: String
  heroHeading: String
  heroSubheading: String
  ctaButtonText: String
  ctaButtonUrl: String
  toPublish: String
  createdAt: DateTime
  updatedAt: DateTime
}

input HomePageUpdateArgs {
  where: HomePageWhereUniqueInput! = {id: 1}
  data: HomePageUpdateInput!
}

input HomePageCreateInput {
  title: String
  heroHeading: String
  heroSubheading: String
  ctaButtonText: String
  ctaButtonUrl: String
  toPublish: String
  createdAt: DateTime
  updatedAt: DateTime
}

type GrantType {
  id: ID!
  title: String
  slug: String
  description: String
  grantAmount: String
  timeFrame: String
  availability: String
  commonUses: String
  badgeText: String
  badgeColor: String
  backgroundColor: String
  grantPurpose: String
  isDisplayed: String
  createdAt: DateTime
  updatedAt: DateTime
}

input GrantTypeWhereUniqueInput {
  id: ID
  slug: String
}

input GrantTypeWhereInput {
  AND: [GrantTypeWhereInput!]
  OR: [GrantTypeWhereInput!]
  NOT: [GrantTypeWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  grantAmount: StringFilter
  timeFrame: StringFilter
  availability: StringFilter
  commonUses: StringFilter
  badgeText: StringFilter
  badgeColor: StringNullableFilter
  backgroundColor: StringNullableFilter
  grantPurpose: StringFilter
  isDisplayed: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input GrantTypeOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  grantAmount: OrderDirection
  timeFrame: OrderDirection
  availability: OrderDirection
  commonUses: OrderDirection
  badgeText: OrderDirection
  badgeColor: OrderDirection
  backgroundColor: OrderDirection
  grantPurpose: OrderDirection
  isDisplayed: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input GrantTypeUpdateInput {
  title: String
  slug: String
  description: String
  grantAmount: String
  timeFrame: String
  availability: String
  commonUses: String
  badgeText: String
  badgeColor: String
  backgroundColor: String
  grantPurpose: String
  isDisplayed: String
  createdAt: DateTime
  updatedAt: DateTime
}

input GrantTypeUpdateArgs {
  where: GrantTypeWhereUniqueInput!
  data: GrantTypeUpdateInput!
}

input GrantTypeCreateInput {
  title: String
  slug: String
  description: String
  grantAmount: String
  timeFrame: String
  availability: String
  commonUses: String
  badgeText: String
  badgeColor: String
  backgroundColor: String
  grantPurpose: String
  isDisplayed: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Page {
  id: ID!
  title: String
  slug: String
  heroHeading: String
  heroSubheading: String
  ctaButtonText: String
  ctaButtonUrl: String
  toPublish: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PageWhereUniqueInput {
  id: ID
  slug: String
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  heroHeading: StringFilter
  heroSubheading: StringFilter
  ctaButtonText: StringFilter
  ctaButtonUrl: StringFilter
  toPublish: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  heroHeading: OrderDirection
  heroSubheading: OrderDirection
  ctaButtonText: OrderDirection
  ctaButtonUrl: OrderDirection
  toPublish: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PageUpdateInput {
  title: String
  slug: String
  heroHeading: String
  heroSubheading: String
  ctaButtonText: String
  ctaButtonUrl: String
  toPublish: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  slug: String
  heroHeading: String
  heroSubheading: String
  ctaButtonText: String
  ctaButtonUrl: String
  toPublish: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Post {
  id: ID!
  title: String
  slug: String
  banner: CloudinaryImage_File
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  toPublish: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  toPublish: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  toPublish: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  title: String
  slug: String
  banner: Upload
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  toPublish: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  slug: String
  banner: Upload
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  toPublish: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createHomePage(data: HomePageCreateInput!): HomePage
  createHomePages(data: [HomePageCreateInput!]!): [HomePage]
  updateHomePage(where: HomePageWhereUniqueInput! = {id: 1}, data: HomePageUpdateInput!): HomePage
  updateHomePages(data: [HomePageUpdateArgs!]!): [HomePage]
  deleteHomePage(where: HomePageWhereUniqueInput! = {id: 1}): HomePage
  deleteHomePages(where: [HomePageWhereUniqueInput!]!): [HomePage]
  createGrantType(data: GrantTypeCreateInput!): GrantType
  createGrantTypes(data: [GrantTypeCreateInput!]!): [GrantType]
  updateGrantType(where: GrantTypeWhereUniqueInput!, data: GrantTypeUpdateInput!): GrantType
  updateGrantTypes(data: [GrantTypeUpdateArgs!]!): [GrantType]
  deleteGrantType(where: GrantTypeWhereUniqueInput!): GrantType
  deleteGrantTypes(where: [GrantTypeWhereUniqueInput!]!): [GrantType]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  homePage(where: HomePageWhereUniqueInput! = {id: 1}): HomePage
  homePages(where: HomePageWhereInput! = {id: {equals: 1}}, orderBy: [HomePageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HomePageWhereUniqueInput): [HomePage!]
  homePagesCount(where: HomePageWhereInput! = {id: {equals: 1}}): Int
  grantType(where: GrantTypeWhereUniqueInput!): GrantType
  grantTypes(where: GrantTypeWhereInput! = {}, orderBy: [GrantTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GrantTypeWhereUniqueInput): [GrantType!]
  grantTypesCount(where: GrantTypeWhereInput! = {}): Int
  page(where: PageWhereUniqueInput!): Page
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
